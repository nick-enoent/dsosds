import { SelectableValue } from '@grafana/data';
import { ScaleDistribution } from './models.gen';
/**
 * @alpha
 */
export declare enum AxisPlacement {
    Auto = "auto",
    Top = "top",
    Right = "right",
    Bottom = "bottom",
    Left = "left",
    Hidden = "hidden"
}
/**
 * @alpha
 */
export declare enum PointVisibility {
    Auto = "auto",
    Never = "never",
    Always = "always"
}
/**
 * @alpha
 */
export declare enum DrawStyle {
    Line = "line",
    Bars = "bars",
    Points = "points"
}
/**
 * @alpha
 */
export declare enum LineInterpolation {
    Linear = "linear",
    Smooth = "smooth",
    StepBefore = "stepBefore",
    StepAfter = "stepAfter"
}
/**
 * @alpha
 */
export declare enum BarAlignment {
    Before = -1,
    Center = 0,
    After = 1
}
/**
 * @alpha
 */
export declare enum BarValueVisibility {
    Auto = "auto",
    Never = "never",
    Always = "always"
}
/**
 * @alpha
 */
export declare enum ScaleOrientation {
    Horizontal = 0,
    Vertical = 1
}
/**
 * @alpha
 */
export declare enum ScaleDirection {
    Up = 1,
    Right = 1,
    Down = -1,
    Left = -1
}
/**
 * @alpha
 */
export interface LineStyle {
    fill?: 'solid' | 'dash' | 'dot' | 'square';
    dash?: number[];
}
/**
 * @alpha
 */
export interface LineConfig {
    lineColor?: string;
    lineWidth?: number;
    lineInterpolation?: LineInterpolation;
    lineStyle?: LineStyle;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: boolean | number;
}
/**
 * @alpha
 */
export interface BarConfig {
    barAlignment?: BarAlignment;
    barWidthFactor?: number;
    barMaxWidth?: number;
}
/**
 * @alpha
 */
export interface FillConfig {
    fillColor?: string;
    fillOpacity?: number;
    fillBelowTo?: string;
}
/**
 * @alpha
 */
export declare enum GraphGradientMode {
    None = "none",
    Opacity = "opacity",
    Hue = "hue",
    Scheme = "scheme"
}
/**
 * @alpha
 */
export interface PointsConfig {
    showPoints?: PointVisibility;
    pointSize?: number;
    pointColor?: string;
    pointSymbol?: string;
}
/**
 * @alpha
 */
export interface ScaleDistributionConfig {
    type: ScaleDistribution;
    log?: number;
}
/**
 * @alpha
 * Axis is actually unique based on the unit... not each field!
 */
export interface AxisConfig {
    axisPlacement?: AxisPlacement;
    axisLabel?: string;
    axisWidth?: number;
    axisSoftMin?: number;
    axisSoftMax?: number;
    scaleDistribution?: ScaleDistributionConfig;
}
/**
 * @alpha
 */
export interface HideSeriesConfig {
    tooltip: boolean;
    legend: boolean;
    viz: boolean;
}
/**
 * @alpha
 */
export interface HideableFieldConfig {
    hideFrom?: HideSeriesConfig;
}
/**
 * @alpha
 */
export declare enum StackingMode {
    None = "none",
    Normal = "normal",
    Percent = "percent"
}
/**
 * @alpha
 */
export interface StackingConfig {
    mode?: StackingMode;
    group?: string;
}
/**
 * @alpha
 */
export interface StackableFieldConfig {
    stacking?: StackingConfig;
}
/**
 * @alpha
 */
export declare enum GraphTresholdsStyleMode {
    Off = "off",
    Line = "line",
    Area = "area",
    LineAndArea = "line+area",
    Series = "series"
}
/**
 * @alpha
 */
export interface GraphThresholdsStyleConfig {
    mode: GraphTresholdsStyleMode;
}
/**
 * @alpha
 */
export interface GraphFieldConfig extends LineConfig, FillConfig, PointsConfig, AxisConfig, BarConfig, StackableFieldConfig, HideableFieldConfig {
    drawStyle?: DrawStyle;
    gradientMode?: GraphGradientMode;
    thresholdsStyle?: GraphThresholdsStyleConfig;
}
/**
 * @alpha
 */
export declare const graphFieldOptions: {
    drawStyle: SelectableValue<DrawStyle>[];
    lineInterpolation: SelectableValue<LineInterpolation>[];
    barAlignment: SelectableValue<BarAlignment>[];
    showPoints: SelectableValue<PointVisibility>[];
    axisPlacement: SelectableValue<AxisPlacement>[];
    fillGradient: SelectableValue<GraphGradientMode>[];
    stacking: SelectableValue<StackingMode>[];
    thresholdsDisplayModes: SelectableValue<GraphTresholdsStyleMode>[];
};
