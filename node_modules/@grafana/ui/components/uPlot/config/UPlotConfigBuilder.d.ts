import { Cursor, Band, Hooks, Select } from 'uplot';
import { DataFrame, EventBus, GrafanaTheme2, TimeRange, TimeZone } from '@grafana/data';
import { PlotConfig, PlotTooltipInterpolator } from '../types';
import { ScaleProps } from './UPlotScaleBuilder';
import { SeriesProps, UPlotSeriesBuilder } from './UPlotSeriesBuilder';
import { AxisProps } from './UPlotAxisBuilder';
import { AxisPlacement } from '../config';
import { UPlotThresholdOptions } from './UPlotThresholds';
export declare class UPlotConfigBuilder {
    private series;
    private axes;
    private scales;
    private bands;
    private cursor;
    private isStacking;
    private select;
    private hasLeftAxis;
    private hasBottomAxis;
    private hooks;
    private tz;
    private sync;
    private thresholds;
    /**
     * Custom handler for closest datapoint and series lookup. Technicaly returns uPlots setCursor hook
     * that sets tooltips state.
     */
    tooltipInterpolator: PlotTooltipInterpolator | undefined;
    constructor(timeZone?: TimeZone);
    scaleKeys: [string, string];
    addHook<T extends keyof Hooks.Defs>(type: T, hook: Hooks.Defs[T]): void;
    addThresholds(options: UPlotThresholdOptions): void;
    addAxis(props: AxisProps): void;
    getAxisPlacement(scaleKey: string): AxisPlacement;
    setCursor(cursor?: Cursor): void;
    setSelect(select: Select): void;
    setStacking(enabled?: boolean): void;
    addSeries(props: SeriesProps): void;
    getSeries(): UPlotSeriesBuilder[];
    /** Add or update the scale with the scale key */
    addScale(props: ScaleProps): void;
    addBand(band: Band): void;
    setTooltipInterpolator(interpolator: PlotTooltipInterpolator): void;
    setSync(): void;
    hasSync(): boolean;
    getConfig(): PlotConfig;
    private ensureNonOverlappingAxes;
    private tzDate;
}
/** @alpha */
declare type UPlotConfigPrepOpts<T extends Record<string, any> = {}> = {
    frame: DataFrame;
    theme: GrafanaTheme2;
    timeZone: TimeZone;
    getTimeRange: () => TimeRange;
    eventBus: EventBus;
    allFrames: DataFrame[];
} & T;
/** @alpha */
export declare type UPlotConfigPrepFn<T extends {} = {}> = (opts: UPlotConfigPrepOpts<T>) => UPlotConfigBuilder;
export {};
